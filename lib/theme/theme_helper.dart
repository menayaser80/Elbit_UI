import 'dart:ui';
import 'package:elbit_ui/core/utils/size_utils.dart';
import 'package:flutter/material.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.gray10001,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(23.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      outlinedButtonTheme: OutlinedButtonThemeData(
        style: OutlinedButton.styleFrom(
          backgroundColor: Colors.transparent,
          side: BorderSide(
            color: colorScheme.primary,
            width: 1.h,
          ),
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(12.h),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: colorScheme.primary,
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
    bodyLarge: TextStyle(
      color: colorScheme.onPrimaryContainer,
      fontSize: 16.fSize,
      fontFamily: 'Tajawal',
      fontWeight: FontWeight.w400,
    ),
    bodySmall: TextStyle(
      color: appTheme.gray600,
      fontSize: 12.fSize,
      fontFamily: 'Tajawal',
      fontWeight: FontWeight.w400,
    ),
    bodyMedium: TextStyle(
      color: colorScheme.onPrimaryContainer,
      fontSize: 14.fSize,
      fontFamily: 'Tajawal',
      fontWeight: FontWeight.w400,
    ),

    headlineLarge: TextStyle(
      color: colorScheme.primary,
      fontSize: 32.fSize,
      fontFamily: 'Tajawal',
      fontWeight: FontWeight.w700,
    ),
    headlineSmall: TextStyle(
      color: colorScheme.onPrimaryContainer,
      fontSize: 24.fSize,
      fontFamily: 'Tajawal',
      fontWeight: FontWeight.w700,
    ),
    labelLarge: TextStyle(
      color: colorScheme.onPrimaryContainer,
      fontSize: 12.fSize,
      fontFamily: 'Poppins',
      fontWeight: FontWeight.w600,
    ),
    labelMedium: TextStyle(
      color: appTheme.gray10001,
      fontSize: 10.fSize,
      fontFamily: 'Poppins',
      fontWeight: FontWeight.w700,
    ),
    titleLarge: TextStyle(
      color: Color(0XFF142433),
      fontSize: 20.fSize,
      fontFamily: 'Tajawal',
      fontWeight: FontWeight.w400,
    ),
    titleMedium: TextStyle(
      color: colorScheme.onPrimaryContainer,
      fontSize: 16.fSize,
      fontFamily: 'Tajawal',
      fontWeight: FontWeight.w700,
    ),
    titleSmall: TextStyle(
      color: colorScheme.onPrimaryContainer,
      fontSize: 14.fSize,
      fontFamily: 'Tajawal',
      fontWeight: FontWeight.w700,
    ),
  );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0XFF224971),
    primaryContainer: Color(0XFFDAE6F2),

    // Error colors
    errorContainer: Color(0XFF214A71),
    onError: Color(0XFF1D4870),

    // On colors(text colors)
    onPrimary: Color(0X7FFFFFFF),
    onPrimaryContainer: Color(0XFF142433),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amberA400 => Color(0XFFF8BD00);
  Color get blueGray6007f => Color(0X7F506173);
  // Black
  Color get black900 => Color(0XFF000000);
  Color get black9007f => Color(0X7F000000);

  Color get whiteA700 => Color(0XFFFFFFFF);


  // BlueGray
  Color get blueGray300 => Color(0XFF8797A8);
  Color get blueGray600 => Color(0XFF43688A);
  Color get blueGray60001 => Color(0XFF506173);

  // DeepOrange
  Color get deepOrange200 => Color(0XFFFFA8A7);

  // Gray
  Color get gray100 => Color(0XFFF5F5F5);
  Color get gray10001 => Color(0XFFF5F7FA);

  // Green
  Color get green700 => Color(0XFF2DA905);
  Color get gray600 => Color(0XFF6D7379);
  // Red
  Color get red500 => Color(0XFFF44336);
  Color get red600 => Color(0XFFE33629);
  Color get gray900 => Color(0XFF142433);
  Color get indigo800 => Color(0XFF224971);
  Color get indigo80001 => Color(0XFF214A71);
  // Teal
  Color get teal10000 => Color(0X00B9D4DB);
  // Teal

  Color get teal50 => Color(0XFFDAE6F2);
  Color get teal100 => Color(0XFFB9D4DB);

  Color get blueGray100 => Color(0XFFD9D9D9);

}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
